{"id":705290359,"lang":"cpp","lang_name":"C++","time":"1 year, 7 months","timestamp":1653287778,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/705290359/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"26.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    unordered_map<int,int>umap;\n    \n    TreeNode* build(vector<int>&in,vector<int>&post,int left,int right,int& postidx)\n    {\n        if(left>right)\n            return NULL;\n        TreeNode* root=new TreeNode(post[postidx]);\n        postidx--;\n        int rootidx=umap[root->val];\n        root->right=build(in,post,rootidx+1,right,postidx);\n        root->left=build(in,post,left,rootidx-1,postidx);\n        return root;\n    }\n    \n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        for(int i=0;i<inorder.size();i++)\n            umap[inorder[i]]=i;\n        int n=inorder.size();\n        int postidx=n-1;\n        return build(inorder,postorder,0,n-1,postidx);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}