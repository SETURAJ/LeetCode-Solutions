{"id":726614377,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1655717191,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/726614377/","is_pending":"Not Pending","title":"House Robber III","memory":"24.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    unordered_map<TreeNode*,int>dp;\n    int find(TreeNode* root)\n    {\n        if(!root)\n            return 0;\n        if(dp.count(root))\n            return dp[root];\n        int ans_inc_root=root->val;\n        if(root->left!=NULL)\n            ans_inc_root+=find(root->left->left)+find(root->left->right);\n        if(root->right!=NULL)\n            ans_inc_root+=find(root->right->left)+find(root->right->right);\n        int ans_exc_root=find(root->left)+find(root->right);\n        int ans=max(ans_inc_root,ans_exc_root);\n        dp[root]=ans;\n        \n        return ans;\n        \n    }\n    \n    int rob(TreeNode* root) \n    {\n        if(!root)\n            return 0;\n        return find(root);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-iii","has_notes":false,"flag_type":1}