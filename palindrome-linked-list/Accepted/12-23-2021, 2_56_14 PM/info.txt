{"id":606139930,"lang":"cpp","lang_name":"C++","time":"2Â years","timestamp":1640289374,"status":10,"status_display":"Accepted","runtime":"176 ms","url":"/submissions/detail/606139930/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"114 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        //finding miiddle of the linked list\n        ListNode* slow=head;\n        ListNode* fast=head;\n        \n        while(fast!=NULL && fast->next!=NULL)\n        {\n            slow=slow->next;\n            fast=fast->next->next;\n        }\n        ListNode *prev=NULL;\n        ListNode *curr=slow;\n        ListNode *next=NULL;\n        while(curr!=NULL)\n        {\n            next=curr->next;\n            curr->next=prev;\n            prev=curr;\n            curr=next;\n        }\n        \n        fast=head;\n        while(prev!=NULL)\n        {\n            if(prev->val!=fast->val)\n                return false;\n            prev=prev->next;\n            fast=fast->next;\n        }\n        return true;\n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false,"flag_type":1}