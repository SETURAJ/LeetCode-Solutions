{"id":599457311,"lang":"cpp","lang_name":"C++","time":"2Â years","timestamp":1639073438,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/599457311/","is_pending":"Not Pending","title":"Intersection of Two Linked Lists","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void reverse(ListNode **head)\n    {\n        ListNode *prev=NULL;\n        ListNode *curr=NULL;\n        ListNode *next=NULL;\n        curr=*head;\n        while(curr!=NULL)\n        {\n            next=curr->next;\n            curr->next=prev;\n            prev=curr;\n            curr=next;\n        }\n        *head=prev;\n    }\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode *temp1=headA;\n        ListNode *temp2=headB;\n        while(temp1->next!=NULL)\n            temp1=temp1->next;\n        while(temp2->next!=NULL)\n            temp2=temp2->next;\n        if(temp1!=temp2)\n            return NULL;\n        stack<ListNode *>s;\n        temp2=headB;\n        while(temp2!=NULL)\n        {\n            s.push(temp2);\n            temp2=temp2->next;\n        }\n        reverse(&headA);\n        ListNode *ans=headA;\n        while(s.empty()!=true && headA)\n        {\n            ListNode *temp=s.top();\n            s.pop();\n            if(temp!=headA)\n                return ans;\n            headA=headA->next;\n            ans=headA;\n        }\n        return ans;\n    }\n};","compare_result":"001011111111000000000000000000000000011","title_slug":"intersection-of-two-linked-lists","has_notes":false,"flag_type":1}