{"id":651821989,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1646211524,"status":10,"status_display":"Accepted","runtime":"54 ms","url":"/submissions/detail/651821989/","is_pending":"Not Pending","title":"Intersection of Two Linked Lists","memory":"14.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n   \n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode *p1 = headA;\n    ListNode *p2 = headB;\n        \n    if (p1 == NULL || p2 == NULL) return NULL;\n\n    while (p1 != NULL && p2 != NULL && p1 != p2) {\n        p1 = p1->next;\n        p2 = p2->next;\n\n        //\n        // Any time they collide or reach end together without colliding \n        // then return any one of the pointers.\n        //\n        if (p1 == p2) return p1;\n\n        //\n        // If one of them reaches the end earlier then reuse it \n        // by moving it to the beginning of other list.\n        // Once both of them go through reassigning, \n        // they will be equidistant from the collision point.\n        //\n        if (p1 == NULL) p1 = headB;\n        if (p2 == NULL) p2 = headA;\n    }\n        \n    return p1;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"intersection-of-two-linked-lists","has_notes":false,"flag_type":1}