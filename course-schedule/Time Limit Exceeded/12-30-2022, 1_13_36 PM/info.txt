{"id":868192779,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1672424016,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/868192779/","is_pending":"Not Pending","title":"Course Schedule","memory":"N/A","code":"class Solution {\npublic:\n    \n    bool finder(int v,vector<int>graph[],vector<bool>visited,vector<bool>recstack)\n    {\n        if(visited[v]==false)\n        {\n            visited[v]=true;\n            recstack[v]=true;\n            for(auto it=graph[v].begin();it!=graph[v].end();it++)\n            {\n                if(!visited[*it] && finder(*it,graph,visited,recstack))\n                    return true;\n                else if(recstack[*it])\n                    return true;\n            }\n        }\n        recstack[v]=false;\n        return false;\n    }\n    \n    bool iscycle(vector<int>graph[],int V)\n    {\n        vector<bool>visited(V,false);\n        vector<bool>recstack(V,false);\n        for(int i=0;i<V;i++)\n        {\n            if(finder(i,graph,visited,recstack))\n                return true;\n        }\n        return false;\n    }\n    \n    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n        vector<int>graph[numCourses];\n        for(auto edge:prerequisites)\n        {\n            graph[edge[1]].emplace_back(edge[0]);\n        }\n        return !iscycle(graph,numCourses);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111110000","title_slug":"course-schedule","has_notes":false,"flag_type":1}