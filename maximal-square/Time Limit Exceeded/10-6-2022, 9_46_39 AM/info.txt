{"id":816508007,"lang":"cpp","lang_name":"C++","time":"1 year, 3 months","timestamp":1665063999,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/816508007/","is_pending":"Not Pending","title":"Maximal Square","memory":"N/A","code":"class Solution {\npublic:\n\n    int dfs(vector<vector<char>>& matrix,int i,int j,int n,int m, vector<vector<int>>dp)\n    {\n        if(i<0 || j<0 || i>=n || j>=m || matrix[i][j]=='0')\n            return 0;\n        if(dp[i][j]!=-1)\n            return dp[i][j];\n        int right=dfs(matrix,i,j+1,n,m,dp);\n        int down=dfs(matrix,i+1,j,n,m,dp);\n        int diag=dfs(matrix,i+1,j+1,n,m,dp);\n        return dp[i][j]=min({right,down,diag})+1;\n    }\n\n    int maximalSquare(vector<vector<char>>& matrix) {\n        int n=matrix.size();\n        int m=matrix[0].size();\n        vector<vector<int>>dp(n,vector<int>(m,-1));\n       \n        int res=0;\n        for(int i=0;i<n;i++)\n        {\n            for(int j=0;j<m;j++)\n            {\n                if(matrix[i][j]=='1')\n                {\n                    int cur=dfs(matrix,i,j,n,m,dp);\n                    int cur_area=cur*cur;\n                    res=max(res,cur_area);\n                }\n            }\n        }\n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111110000000000000000","title_slug":"maximal-square","has_notes":false,"flag_type":1}