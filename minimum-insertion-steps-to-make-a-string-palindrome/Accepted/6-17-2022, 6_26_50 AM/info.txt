{"id":724346065,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1655461610,"status":10,"status_display":"Accepted","runtime":"146 ms","url":"/submissions/detail/724346065/","is_pending":"Not Pending","title":"Minimum Insertion Steps to Make a String Palindrome","memory":"27.1 MB","code":"class Solution {\npublic:\n    \n    int find_lcs(string s1,string s2)\n    {\n        vector<vector<int>>dp(s1.length()+1,vector<int>(s2.length()+1));\n        for(int i=0;i<=s1.length();i++)\n        {\n            for(int j=0;j<=s2.length();j++)\n            {\n                if(i==0 || j==0)\n                    dp[i][j]=0;\n                else if(s1[i-1]==s2[j-1])\n                    dp[i][j]=dp[i-1][j-1]+1;\n                else\n                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);\n            }\n        }\n        return dp[s1.length()][s2.length()];\n    }    \n    int minInsertions(string s) {\n        string s_rev=s;\n        reverse(s.begin(),s.end());\n        \n        int n=s.length();\n        int l=find_lcs(s,s_rev);\n        return n-l;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-insertion-steps-to-make-a-string-palindrome","has_notes":false,"flag_type":1}