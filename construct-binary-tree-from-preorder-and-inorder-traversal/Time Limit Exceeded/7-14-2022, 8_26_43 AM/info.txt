{"id":746912496,"lang":"cpp","lang_name":"C++","time":"1 year, 5 months","timestamp":1657801603,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/746912496/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int preIndex=0;\n    \n    TreeNode* getTree(vector<int>& preorder, vector<int>& inorder,unordered_map<int,int>m,int is,int ie){\n        if(is>ie)\n            return NULL;\n        TreeNode *root=new TreeNode(preorder[preIndex++]);\n        int p=m[root->val];\n        root->left=getTree(preorder,inorder,m,is,p-1);\n        root->right=getTree(preorder,inorder,m,p+1,ie);\n        return root;\n    }\n    \n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        unordered_map<int,int>m;\n        int n=inorder.size();\n        for(int i=0;i<n;i++)\n            m[inorder[i]]=i;\n        return getTree(preorder,inorder,m,0,n-1);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}