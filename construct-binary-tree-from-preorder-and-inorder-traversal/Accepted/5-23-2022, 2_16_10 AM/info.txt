{"id":705279886,"lang":"cpp","lang_name":"C++","time":"1 year, 7 months","timestamp":1653286570,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/705279886/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"25.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    TreeNode* build(vector<int>&preorder,vector<int>&inorder,int& rootidx,int left, int right)\n    {\n        if(left>right)\n            return NULL;\n        int pivot=left;\n        while(inorder[pivot]!=preorder[rootidx])\n            pivot++;\n        rootidx++;\n        TreeNode* node=new TreeNode(inorder[pivot]);\n        node->left=build(preorder,inorder,rootidx,left,pivot-1);\n        node->right=build(preorder,inorder,rootidx,pivot+1,right);\n        return node;\n    }\n    \n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        int rootidx=0;\n        return build(preorder,inorder,rootidx,0,inorder.size()-1);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}