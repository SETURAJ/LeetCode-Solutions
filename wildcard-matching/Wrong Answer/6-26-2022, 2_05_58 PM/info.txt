{"id":731934443,"lang":"cpp","lang_name":"C++","time":"1Â year, 6Â months","timestamp":1656266758,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/731934443/","is_pending":"Not Pending","title":"Wildcard Matching","memory":"N/A","code":"class Solution {\npublic:\n    \n    bool isallstars(string s,int i)\n    {\n        for(int k=i;k>=0;k--)\n        {\n            if(s[i]!='*')\n                return false;\n        }\n        return true;\n    }\n    \n    bool find(int i,int j,string &s,string &p)\n    {\n        if(i<0 && j<0)\n            return true;\n        if(i<0 && j>=0)\n            return isallstars(p,j);\n        if(j<0 && i>=0)\n            return isallstars(s,i);\n        if(s[i]==p[j] && s[i]!='*')\n            return find(i-1,j-1,s,p);\n        else\n        {\n            if(s[i]=='?' || p[j]=='?')\n                return find(i-1,j-1,s,p);\n            else if(s[i]=='*' && p[j] !='*')\n                return find(i,j-1,s,p) || find(i-1,j-1,s,p);\n            else if(s[i]!='*' && p[j]=='*')\n                return find(i-1,j,s,p)|| find(i-1,j-1,s,p);\n            else if(s[i]=='*' && p[j]=='*')\n                return find(i,j-1,s,p) || find(i-1,j,s,p) || find(i-1,j-1,s,p);\n            else return false;\n        }\n        \n    }\n    \n    bool isMatch(string s, string p) {\n        int l1=s.length(),l2=p.length();\n        return find(l1-1,l2-1,s,p);\n    }\n};","compare_resulttitle_slug":"wildcard-matching","has_notes":false,"flag_type":1}