{"id":714816412,"lang":"cpp","lang_name":"C++","time":"1 year, 7 months","timestamp":1654415672,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/714816412/","is_pending":"Not Pending","title":"N-Queens II","memory":"N/A","code":"\n   \nint solve(vector<bool>& col, vector<bool>& diag, vector<bool>& anti_diag, int row) {\n\tint n = size(col), count = 0;\n    if(row == n) return 1;\n\tfor(int column = 0; column < n; column++)           \n\t\tif(!col[column] && !diag[row + column] && !anti_diag[row - column + n - 1]){        // check if (row, column) is safe\n\t\t\tcol[column] = diag[row + column] = anti_diag[row - column + n - 1] = true;      // place at (row, column)\n\t\t\tcount += solve(col, diag, anti_diag, row + 1);                                  // explore for the next row\n\t\t\tcol[column] = diag[row + column] = anti_diag[row - column + n - 1] = false;     // backtrack\n\t\t}                                \n\treturn count;\n}\n\nint totalNQueens(int n) {\n\tvector<bool> col(n), diag(2*n-1), anti_diag(2*n-1);\n\treturn solve(col, diag, anti_diag, 0);\n}","compare_result":null,"title_slug":"n-queens-ii","has_notes":false,"flag_type":1}