{"id":651883229,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1646221749,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/651883229/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"7.5 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    \n    int findposition(ListNode* head,ListNode* slow)\n    {\n        int count=0;\n        while(head!=slow)\n        {\n            if(head==slow)\n                return count;\n            head=head->next;\n            slow=slow->next;\n            count++;\n        }\n        return count;\n    }\n    \n    ListNode *detectCycle(ListNode *head) {\n        ListNode* slow=head;\n        ListNode* fast=head;\n        int pos=-1;\n        while(slow && fast && fast->next)\n        {\n            slow=slow->next;\n            fast=fast->next->next;\n            if(slow==fast)\n            {\n                pos=findposition(head,slow);\n                break;\n            }\n        }\n        if(pos==0)\n                return head;\n        if(pos!=-1)\n        {\n            while(pos)\n            {\n                head=head->next;\n                pos--;\n            }\n            return head;\n        }\n        return NULL;\n    }\n};","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1}