{"id":651883601,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1646221807,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/651883601/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"7.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    \n    \n    ListNode *detectCycle(ListNode *head) {\n       if(!head) return NULL;\n        \n        ListNode *slow=head,*fast=head;\n        \n        //cycle checking\n        do{\n            //move slow by one\n            slow = slow->next;\n            if(!slow) break;\n            \n            //move fast by 2\n            fast= fast->next;\n            if(!fast) break;\n            fast = fast->next;\n            if(!fast) break;            \n            \n        }while(slow!=fast);\n        //no cycle\n        if(!slow or !fast)\n            return NULL;\n        \n        //check the entry point\n        fast = head;\n        while(fast !=slow)\n            fast=fast->next, slow=slow->next;\n        return fast;\n    }\n};","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1}