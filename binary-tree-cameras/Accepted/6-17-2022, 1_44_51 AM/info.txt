{"id":724196694,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1655444691,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/724196694/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"21.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    #define NO_CAMERA       0\n    #define HAS_CAMERA      2\n    #define NOT_NEEDED      1\n    int ans = 0;\n    \n    \n    int dfs(TreeNode* root)\n    {\n        if(!(root))\n            return NOT_NEEDED;\n        int l=dfs(root->left);\n        int r=dfs(root->right);\n        \n        if(l==NO_CAMERA || r==NO_CAMERA)\n        {\n            ans++;\n            return HAS_CAMERA;\n        }\n        else if(l==HAS_CAMERA || r==HAS_CAMERA)\n            return NOT_NEEDED;\n        else\n            return NO_CAMERA;\n    }\n    \n    int minCameraCover(TreeNode* root) {\n        if(dfs(root)==NO_CAMERA)\n            ans++;\n        return ans;\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras","has_notes":false,"flag_type":1}