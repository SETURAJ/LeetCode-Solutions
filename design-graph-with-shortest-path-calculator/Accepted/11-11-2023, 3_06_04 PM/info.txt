{"id":1096798963,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1699733164,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1096798963/","is_pending":"Not Pending","title":"Design Graph With Shortest Path Calculator","memory":"81.6 MB","code":"class Graph {\npublic:\n    vector<pair<int,int>>graph[100];\n    Graph(int n, vector<vector<int>>& edges) {\n        for(auto e:edges)\n        {\n            graph[e[0]].push_back(make_pair(e[1],e[2]));\n        }\n    }\n    \n    void addEdge(vector<int> edge) {\n        graph[edge[0]].push_back(make_pair(edge[1],edge[2]));\n    }\n    \n    int shortestPath(int node1, int node2) {\n        int sz = 100;\n        vector<int>dist(sz,INT_MAX);\n        priority_queue<pair<int,int>,vector<pair<int,int>> ,greater<pair<int,int>>>pq;\n        pq.push(make_pair(node1,0));\n        dist[node1]=0;\n        while(!pq.empty())\n        {\n            int u = pq.top().first;\n            pq.pop();\n            for(int i=0;i<graph[u].size();i++)\n            {\n                int v=graph[u][i].first;\n                int w=graph[u][i].second;\n                if(dist[v]>dist[u]+w)\n                {\n                    dist[v]=dist[u]+w;\n                    pq.push(make_pair(v,dist[v]));\n                }\n            }\n        }\n        if(dist[node2]== INT_MAX)\n            dist[node2]=-1;\n        return dist[node2];\n    }\n};\n\n/**\n * Your Graph object will be instantiated and called as such:\n * Graph* obj = new Graph(n, edges);\n * obj->addEdge(edge);\n * int param_2 = obj->shortestPath(node1,node2);\n */","compare_result":"111111111111111111111111111111111111","title_slug":"design-graph-with-shortest-path-calculator","has_notes":false,"flag_type":1}