{"id":1135161030,"lang":"cpp","lang_name":"C++","time":"4 days, 16 hours","timestamp":1704246454,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1135161030/","is_pending":"Not Pending","title":"Triangle","memory":"9.1 MB","code":"class Solution {\npublic:\n    /*\n    Recursive and memo solution\n    int minpath(int i,int j,vector<vector<int>>&triangle,vector<vector<int>>&memo)\n    {\n        if(i==triangle.size())\n            return 0;\n        if(memo[i][j]!=-1)\n            return memo[i][j];\n        return memo[i][j]= triangle[i][j] + min(minpath(i+1,j,triangle,memo),minpath(i+1,j+1,triangle,memo));\n    }\n    */\n    int minimumTotal(vector<vector<int>>& triangle) {\n        int m = triangle.size();\n        //Optimized Solution\n        \n        vector<int>res = triangle[m-1];\n        \n        for(int i=m-2;i>=0;i--)\n        {\n            for(int j=0;j<=i;j++)\n                res[j] = triangle[i][j] + min(res[j],res[j+1]);\n        }\n        return res[0];\n        \n       /*\n       2-D dp solution\n        vector<vector<int>>dp(m,vector<int>(m,INT_MAX));\n        \n        for(int i=0;i<m;i++)\n            dp[m-1][i] = triangle[m-1][i];  //for last row the dp can be filled as we starting from bottom so only one                                             //choice\n        for(int i=m-2;i>=0;i--)\n        {\n            for(int j=0;j<=i;j++)\n                dp[i][j] = triangle[i][j] + min(dp[i+1][j],dp[i+1][j+1]);\n        }\n        return dp[0][0];\n        */\n        \n        //vector<vector<int>>memo(m,vector<int>(m,-1));\n        //return minpath(0,0,triangle,memo);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111","title_slug":"triangle","has_notes":false,"flag_type":1}