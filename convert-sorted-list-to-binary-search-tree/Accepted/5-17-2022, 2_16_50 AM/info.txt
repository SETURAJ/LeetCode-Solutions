{"id":701222618,"lang":"cpp","lang_name":"C++","time":"1 year, 7 months","timestamp":1652768210,"status":10,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/701222618/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"28.3 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedListToBST(ListNode* head,ListNode* tail=NULL) {\n        if(head==tail)\n            return NULL;\n        ListNode* fast=head,*slow=head;\n        while(fast!=tail && fast->next!=tail)\n        {\n            slow=slow->next;\n            fast=fast->next->next;\n        }\n        TreeNode* root=new TreeNode(slow->val);\n        root->left=sortedListToBST(head,slow);\n        root->right=sortedListToBST(slow->next,tail);\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree","has_notes":false,"flag_type":1}