{"id":889895077,"lang":"cpp","lang_name":"C++","time":"11 months, 1 week","timestamp":1675320829,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/889895077/","is_pending":"Not Pending","title":"Verifying an Alien Dictionary","memory":"9.5 MB","code":"class Solution {\npublic:\n    std::vector<int> ordermap=std::vector<int>(26);\n\n    bool compare(string s1,string s2)\n    {\n        int j=0;\n        while(j<s1.length() && j<s2.length())\n        {\n            if(s1[j]==s2[j])\n                j++;\n            else if(ordermap[s1[j]-'a']>ordermap[s2[j]-'a'])\n                return true;\n            else return false;\n        }\n        if(s1.length()<s2.length())\n            return false;\n        return true;\n    }\n\n    bool isAlienSorted(vector<string>& words, string order) {\n        for(int i=0;i<order.length();i++)\n            ordermap[order[i]-'a']=i;\n        for(int i=1;i<words.size();i++)\n        {\n            if(!compare(words[i],words[i-1]))\n                return false;\n        }\n        return true;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"verifying-an-alien-dictionary","has_notes":false,"flag_type":1}