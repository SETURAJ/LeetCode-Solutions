{"id":655777279,"lang":"cpp","lang_name":"C++","time":"1 year, 10 months","timestamp":1646731954,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/655777279/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"11.1 MB","code":"class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int l = 0, r = nums.size()-1;\n        while (l <= r) {\n            int mid = (l+r) / 2;\n            if (target == nums[mid])\n                return mid;\n            // there exists rotation; the middle element is in the left part of the array\n            if (nums[mid] > nums[r]) {\n                if (target < nums[mid] && target >= nums[l])\n                    r = mid - 1;\n                else\n                    l = mid + 1;\n            }\n            // there exists rotation; the middle element is in the right part of the array\n            else if (nums[mid] < nums[l]) {\n                if (target > nums[mid] && target <= nums[r])\n                    l = mid + 1;\n                else\n                    r = mid - 1;\n            }\n            // there is no rotation; just like normal binary search\n            else {\n                if (target < nums[mid])\n                    r = mid - 1;\n                else\n                    l = mid + 1;\n            }\n        }\n        return -1;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1}