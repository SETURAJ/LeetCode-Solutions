{"id":701921531,"lang":"cpp","lang_name":"C++","time":"1 year, 7 months","timestamp":1652855165,"status":10,"status_display":"Accepted","runtime":"255 ms","url":"/submissions/detail/701921531/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"63.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    vector<int>tree;\n    \n    void inorder(TreeNode* root)\n    {\n        if(root==NULL)\n            return;\n        inorder(root->left);\n        tree.push_back(root->val);\n        inorder(root->right);\n    }\n    \n    \n    TreeNode* createbst(int start,int end)\n    {\n        if(start>end)\n            return NULL;\n        int mid=(start+end)/2;\n        TreeNode* new_node=new TreeNode(tree[mid]);\n        new_node->left=createbst(start,mid-1);\n        new_node->right=createbst(mid+1,end);\n        return new_node;\n    }\n        \n    TreeNode* balanceBST(TreeNode* root) {\n        inorder(root);\n        int n=tree.size();\n        return createbst(0,n-1);\n        \n    }\n};","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree","has_notes":false,"flag_type":1}