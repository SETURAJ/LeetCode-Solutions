{"id":724233021,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1655448149,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/724233021/","is_pending":"Not Pending","title":"Repeated String Match","memory":"7.2 MB","code":"class Solution {\npublic:\n    \n    #define d 256\n    int q=1000000;\n    int rabinkarp(string txt,string pat)\n    {\n        int M = pat.size();\n        int N = txt.size();\n        int i, j;\n        int p = 0; // hash value for pattern\n        int t = 0; // hash value for txt\n        long long int h = 1;\n     \n        // The value of h would be \"pow(d, M-1)%q\"\n        for (i = 0; i < M - 1; i++)\n            h = (h * d) % q;\n     \n        // Calculate the hash value of pattern and first\n        // window of text\n        for (i = 0; i < M; i++)\n        {\n            p = (d * p + pat[i]) % q;\n            t = (d * t + txt[i]) % q;\n        }\n     \n        // Slide the pattern over text one by one\n        for (i = 0; i <= N - M; i++)\n        {\n     \n            // Check the hash values of current window of text\n            // and pattern. If the hash values match then only\n        // check for characters one by one\n            if ( p == t )\n            {  \n                /* Check for characters one by one */\n                for (j = 0; j < M; j++)\n                {\n                    if (txt[i+j] != pat[j])\n                    {\n                      break;\n                    }\n                       \n                          \n                }\n     \n                // if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1]\n               \n                if (j == M)\n                    return 1;\n            }\n     \n            // Calculate hash value for next window of text: Remove\n            // leading digit, add trailing digit\n            if ( i < N-M )\n            {\n                t = (d*(t - txt[i]*h) + txt[i+M])%q;\n     \n                // We might get negative value of t, converting it\n                // to positive\n                if (t < 0)\n                t = (t + q);\n            }\n        }\n        return -1;\n        \n    }\n    \n    int repeatedStringMatch(string a, string b) {\n        if(a==b)\n            return 1;\n        string source=a;\n        int count=1;\n        while(source.size()<b.size())\n        {\n            count++;\n            source+=a;\n        }\n        if(source==b)\n            return count;\n        if(rabinkarp(source,b)!=-1)\n            return count;\n        if(rabinkarp(source+a,b)!=-1)\n            return count+1;\n        return -1;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"repeated-string-match","has_notes":false,"flag_type":1}