{"id":701911971,"lang":"cpp","lang_name":"C++","time":"1 year, 7 months","timestamp":1652854112,"status":10,"status_display":"Accepted","runtime":"1214 ms","url":"/submissions/detail/701911971/","is_pending":"Not Pending","title":"Critical Connections in a Network","memory":"210.7 MB","code":"class Solution {\npublic:\n    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {\n        \n            disc = vector<int>(n);\n        low = vector<int>(n);\n        for (auto conn : connections) {\n            edgeMap[conn[0]].push_back(conn[1]);\n            edgeMap[conn[1]].push_back(conn[0]);\n        }\n        dfs(0, -1);\n        return ans;\n    }\n    void dfs(int curr, int prev) {\n        disc[curr] = low[curr] = time++;\n        for (int next : edgeMap[curr]) {\n            if (disc[next] == 0) {\n                dfs(next, curr);\n                low[curr] = min(low[curr], low[next]);\n            } else if (next != prev)\n                low[curr] = min(low[curr], disc[next]);\n            if (low[next] > disc[curr]) \n                ans.push_back({curr, next});\n        }\n    }\nprivate:\n    vector<int> disc{0}, low{0};\n    int time = 1;\n    vector<vector<int>> ans;\n    unordered_map<int, vector<int>> edgeMap;\n\n    \n};","compare_result":"11111111111111111","title_slug":"critical-connections-in-a-network","has_notes":false,"flag_type":1}