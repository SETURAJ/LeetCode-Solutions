{"id":700557623,"lang":"cpp","lang_name":"C++","time":"1 year, 7 months","timestamp":1652687425,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/700557623/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"23.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(root==NULL)\n            return root;\n        else if((p->val == root->val || q->val == root->val)|| (root->val>p->val && root->val<q->val)||(root->val<p->val && root->val>q->val) )\n            return root;\n       else if(root->val>(max(p->val,q->val)))\n            return lowestCommonAncestor(root->left,p,q);\n        else \n            return lowestCommonAncestor(root->right,p,q);\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}