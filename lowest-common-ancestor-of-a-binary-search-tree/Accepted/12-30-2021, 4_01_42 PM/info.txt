{"id":609994326,"lang":"cpp","lang_name":"C++","time":"2Â years","timestamp":1640898102,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/609994326/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"23.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(root->val==p->val || root->val==q->val)\n            return root;\n        if(root->left==NULL && root->right==NULL)\n            return NULL;\n        TreeNode* left=NULL,*right=NULL;\n        if(root->left)\n            left=lowestCommonAncestor(root->left,p,q);\n        if(root->right)\n            right=lowestCommonAncestor(root->right,p,q);\n        if(left && right)\n            return root;\n        return left==NULL?right:left;\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}