{"id":665550386,"lang":"cpp","lang_name":"C++","time":"1 year, 9 months","timestamp":1648015650,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/665550386/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"13.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    TreeNode* build(vector<int>&A,int &i,int bound)\n    {\n        if(i==A.size()||A[i]>bound)\n            return NULL;\n        TreeNode* node=new TreeNode(A[i]);\n        i++;\n        node->left=build(A,i,node->val);\n        node->right=build(A,i,bound);\n        return node;\n    }\n    \n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n        int i=0;\n        return build(preorder,i,INT_MAX);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}