{"id":767210893,"lang":"cpp","lang_name":"C++","time":"1 year, 5 months","timestamp":1659843519,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/767210893/","is_pending":"Not Pending","title":"Check if There is a Valid Partition For The Array","memory":"N/A","code":"class Solution {\npublic:\n    \n    bool find(vector<int>arr,int n,vector<bool>dp)\n    {\n        dp[0]=true;\n        dp[1]=false;\n        for(int i=2;i<=n;i++)\n        {\n            if(i==2)\n            {\n                if(arr[i-1]==arr[i-2] and arr[i-2])\n                {\n                    dp[i]=true;      \n                }\n                \n            }\n            else\n            {\n                if(arr[i-1]==arr[i-2] and arr[i-2])\n                {\n                    dp[i]=true;\n                }\n                if(arr[i-1]==arr[i-2] and arr[i-1]==arr[i-3] and dp[i-3])\n                {\n                    dp[i]=true;\n                }\n                if(arr[i-1]-arr[i-2]==1 and arr[i-1]-arr[i-3]==2 and dp[i-3])\n                {\n                    dp[i]=true;\n                }\n            }\n        }\n        return dp[n];\n    }\n    \n    bool validPartition(vector<int>& nums) {\n        int n = nums.size();\n        vector<bool>dp(n+1 , false);\n        dp[0] = true;\n        return find(nums,n,dp);\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111110111011111111100001111110101","title_slug":"check-if-there-is-a-valid-partition-for-the-array","has_notes":false,"flag_type":1}