{"id":700573632,"lang":"cpp","lang_name":"C++","time":"1 year, 7 months","timestamp":1652689672,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/700573632/","is_pending":"Not Pending","title":"Find Mode in Binary Search Tree","memory":"25.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<int,int>umap;\n    \n    void traverseBST(TreeNode* node)\n    {\n        if(node==NULL)\n            return;\n        traverseBST(node->left);\n        umap[node->val]++;\n        traverseBST(node->right);\n    }\n    \n    vector<int> findMode(TreeNode* root) {\n        traverseBST(root);\n        vector<int>res;\n        int maxfreq=0;\n        for(auto it=umap.begin();it!=umap.end();it++)\n        {\n            if(it->second>maxfreq)\n                maxfreq=it->second;\n        }\n        for(auto it=umap.begin();it!=umap.end();it++)\n        {\n            if(it->second == maxfreq)\n                res.push_back(it->first);\n        }\n        return res;\n        \n    }\n};","compare_result":"11111111111111111111111","title_slug":"find-mode-in-binary-search-tree","has_notes":false,"flag_type":1}