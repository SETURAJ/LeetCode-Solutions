{"id":701242861,"lang":"cpp","lang_name":"C++","time":"1 year, 7 months","timestamp":1652770355,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/701242861/","is_pending":"Not Pending","title":"Serialize and Deserialize BST","memory":"28.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        return encode(root);\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        stringstream ss(data);\n        string item;\n        TreeNode* root=NULL;\n        while(getline(ss,item,'-'))\n            root=insert(root,stoi(item));\n        \n        return root;\n    }\n\nprivate:\n    string encode(TreeNode* root)\n    {\n        if(!root)\n            return \"\";\n        return to_string(root->val)+\"-\"+encode(root->left)+encode(root->right);\n    }\n    TreeNode* insert(TreeNode* root,int val)\n    {\n        if(root==NULL)\n        {\n            TreeNode* temp=new TreeNode(val);\n            return temp;\n        }\n        if(val<=root->val)\n            root->left=insert(root->left,val);\n        else\n            root->right=insert(root->right,val);\n        \n        return root;\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec* ser = new Codec();\n// Codec* deser = new Codec();\n// string tree = ser->serialize(root);\n// TreeNode* ans = deser->deserialize(tree);\n// return ans;","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-bst","has_notes":false,"flag_type":1}