{"id":767229258,"lang":"cpp","lang_name":"C++","time":"1 year, 5 months","timestamp":1659844664,"status":10,"status_display":"Accepted","runtime":"452 ms","url":"/submissions/detail/767229258/","is_pending":"Not Pending","title":"Count Vowels Permutation","memory":"20.1 MB","code":"class Solution {\n    const int MOD = 1e9 + 7;\n    const unordered_map<char, vector<char>> mappings{ {'s', {'a', 'e', 'i', 'o', 'u'} }, // start\n                                                      {'a', {'e'}                     }, \n                                                      {'e', {'a', 'i'}                }, \n                                                      {'i', {'a', 'e', 'o', 'u'}      }, \n                                                      {'o', {'i', 'u'}                },\n                                                      {'u', {'a'}                     }  };\n    unordered_map<char, vector<int>> dp;\npublic:\n    int countVowelPermutation(int n) {\n        dp['s'] = dp['a'] = dp['e'] = dp['i'] = dp['o'] = dp['u'] = vector<int>(n+1);\n        return solve(n, 's');                         // start with s\n    }\n    int solve(int rem, char prev) {\n        if(rem == 0) return 1;                        // no need to pick further. We have formed 1 string of length = n.\n        if(dp[prev][rem]) return dp[prev][rem];       // if result already calculated for current state, directly return it\n        for(auto c : mappings.at(prev))               // try each vowel allowed after prev character\n            dp[prev][rem] = (dp[prev][rem] + solve(rem - 1, c)) % MOD;  \n        return dp[prev][rem];\n    }\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"count-vowels-permutation","has_notes":false,"flag_type":1}