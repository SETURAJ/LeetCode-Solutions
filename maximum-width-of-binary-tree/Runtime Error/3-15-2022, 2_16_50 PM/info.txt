{"id":660661635,"lang":"cpp","lang_name":"C++","time":"1 year, 9 months","timestamp":1647368210,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/660661635/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        if(root==NULL)\n            return 0;\n        int ans=0;\n        queue<pair<TreeNode*,int>>q;\n        q.push({root,0});\n        while(!q.empty())\n        {\n            int n=q.size();\n            int curmin=q.front().second;\n            int leftmost,rightmost;\n            for(int i=0;i<n;i++)\n            {\n                int cur_id=q.front().second - curmin;\n                TreeNode *temp=q.front().first;\n                q.pop();\n                if(i==0)\n                    leftmost=cur_id;\n                if(i==n-1)\n                    rightmost=cur_id;\n                if(temp->left)\n                    q.push({temp->left,cur_id*2});\n                if(temp->right)\n                    q.push({temp->right,cur_id*2+1});\n            }\n            ans=max(ans,rightmost-leftmost+1);\n        }\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}