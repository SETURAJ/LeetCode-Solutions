{"id":700505970,"lang":"cpp","lang_name":"C++","time":"1 year, 7 months","timestamp":1652681288,"status":10,"status_display":"Accepted","runtime":"381 ms","url":"/submissions/detail/700505970/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"75 MB","code":"class Solution {\npublic:\n    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {\n        int m=grid.size();\n        int n=grid[0].size();\n        if(m==0 || n==0)\n            return -1;\n        if(grid[0][0] !=0 || grid[m-1][n-1]!=0)\n            return -1;\n        queue<pair<int, int>> queue;\n    queue.push(make_pair(0,0));\n    vector<vector<int>> directions = {{1,1}, {0,1},{1,0},{0,-1},{-1,0},{-1, -1},{1, -1},{-1, 1}};\n    grid[0][0] = 1;\n    while(!queue.empty()){\n        auto curr = queue.front();\n        int x = curr.first, y = curr.second;\n        if( x == m -1 && y == n -1) return grid[x][y];\n        \n        for(auto direction : directions){\n            int nx = x + direction[0];\n            int ny = y + direction[1];\n            if(nx >= 0 && nx < m && ny >= 0 && ny < n && grid[nx][ny] == 0){\n                queue.push(make_pair(nx,ny));\n                grid[nx][ny] = grid[x][y] + 1;\n            }\n        }\n        queue.pop();\n    }\n    return -1;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix","has_notes":false,"flag_type":1}